---
# tasks file for buildrhv
 - name: Authenticate to RHV-M
   ovirt_auth:
     url: "https://{{ rhvm_addr }}/ovirt-engine/api"
     username: "{{ rhv_user }}"
     password: "{{ rhv_pass }}" 
     insecure: true


 - name: Set the Provider URL
   set_fact:
     provider_url: "{{ manageiq.api_url }}/api/providers/1"

 - name: Set the Service URL
   set_fact:
     svc_url: "/api/{{ manageiq.service }}"

 - name: create the VM
   ovirt_vms: 
     auth: "{{ ovirt_auth }}"
     state: running
     name: "{{ vm_name }}"
     cluster: "{{ cluster }}"
     wait: True
     template: "{{ template_name }}"
     nics:
       - name: eth0
         profile_name: "{{ network_name }}"
   register: new_vm

 - debug: var=new_vm

 - set_fact: new_vm_uuid="{{ new_vm.vm.id }}"

 - name: Wait for IP

   pause: 
     seconds: 30

 - name: Refresh provider in CloudForms
   uri:
     url: "{{ provider_url }}"
     method: POST
     body:
       action: refresh
     body_format: json
     validate_certs: False
     headers:
       X-Auth-Token: "{{ manageiq.api_token }}"
       Content-Type: "application/json" 
     status_code: 200
   register: output
 - debug: var=output
 - name: set the task href
   set_fact:
     task_url: "{{ output.json.task_href}}"
 - debug: var=task_url

 - name: List web vms
   ovirt_vms_facts:
     auth: "{{ ovirt_auth }}"
     pattern: name=web*
   when: web

 - name: Get VM API info
   uri:
     url: "https://{{ rhvm_addr }}{{ item.href }}/reporteddevices"
     method: GET
     return_content: yes
     user: "{{ rhv_user }}"
     password: "{{ rhv_pass }}"
     validate_certs: no
     body_format: raw
     headers:
       Accept: application/json
   with_items: "{{ ovirt_vms }}"
   register: vmapi
   when: web

 - name: add web server to inventory
   add_host:
     hostname: "{{ item.json.reported_device[0].ips.ip[0].address }}"
     ansible_ssh_user: root
     groupname: web
   with_items: "{{ vmapi.results }}"
   when: web

 - name: List haproxy vms
   ovirt_vms_facts:
     auth: "{{ ovirt_auth }}"
     pattern: name=haproxy
   when: haproxy

 - name: Get VM API info
   uri:
     url: "https://{{ rhvm_addr }}{{ item.href }}/reporteddevices"
     method: GET
     return_content: yes
     user: "{{ rhv_user }}"
     password: "{{ rhv_pass }}"
     validate_certs: no
     body_format: raw
     headers:
       Accept: application/json
   with_items: "{{ ovirt_vms }}"
   register: vmapi
   when: haproxy

 - name: add haproxy server to inventory
   add_host:
     hostname: "{{ item.json.reported_device[0].ips.ip[0].address }}"
     ansible_ssh_user: root
     groupname: haproxy
   with_items: "{{ vmapi.results }}"
   when: haproxy
